<!DOCTYPE html>
<html lang="zh-CN">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>GMP门户测试仪表板</title>
    <link rel="stylesheet" href="assets/css/gmp-portal.css">
    <style>
        .dashboard-container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
        }
        .dashboard-header {
            text-align: center;
            margin-bottom: 40px;
        }
        .test-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }
        .test-card {
            background: white;
            border-radius: 8px;
            padding: 20px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            transition: transform 0.2s ease, box-shadow 0.2s ease;
        }
        .test-card:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 8px rgba(0,0,0,0.15);
        }
        .test-card h3 {
            color: #333;
            margin-bottom: 10px;
        }
        .test-card p {
            color: #666;
            margin-bottom: 15px;
            line-height: 1.5;
        }
        .test-card .status {
            display: inline-block;
            padding: 4px 8px;
            border-radius: 4px;
            font-size: 12px;
            font-weight: bold;
            margin-bottom: 10px;
        }
        .status-ready { background: #d4edda; color: #155724; }
        .status-warning { background: #fff3cd; color: #856404; }
        .status-error { background: #f8d7da; color: #721c24; }
        .test-button {
            background: #007bff;
            color: white;
            border: none;
            padding: 10px 20px;
            border-radius: 4px;
            cursor: pointer;
            text-decoration: none;
            display: inline-block;
            margin-right: 10px;
            margin-bottom: 5px;
            transition: background 0.2s ease;
        }
        .test-button:hover {
            background: #0056b3;
        }
        .test-button.secondary {
            background: #6c757d;
        }
        .test-button.secondary:hover {
            background: #545b62;
        }
        .quick-actions {
            background: #f8f9fa;
            border-radius: 8px;
            padding: 20px;
            margin-bottom: 30px;
        }
        .quick-actions h3 {
            margin-bottom: 15px;
        }
        .system-info {
            background: #e9ecef;
            border-radius: 8px;
            padding: 15px;
            margin-top: 20px;
        }
        .system-info h4 {
            margin-bottom: 10px;
        }
        .info-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 10px;
        }
        .info-item {
            background: white;
            padding: 10px;
            border-radius: 4px;
            border-left: 4px solid #007bff;
        }
        .info-item strong {
            color: #333;
        }
        .progress-section {
            background: white;
            border-radius: 8px;
            padding: 20px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            margin-bottom: 30px;
        }
        .progress-bar {
            width: 100%;
            height: 20px;
            background: #e9ecef;
            border-radius: 10px;
            overflow: hidden;
            margin: 10px 0;
        }
        .progress-fill {
            height: 100%;
            background: linear-gradient(90deg, #007bff, #28a745);
            transition: width 0.3s ease;
        }
        .test-results {
            background: #f8f9fa;
            border-radius: 8px;
            padding: 15px;
            margin-top: 20px;
            max-height: 200px;
            overflow-y: auto;
        }
        .result-item {
            padding: 5px 0;
            border-bottom: 1px solid #dee2e6;
        }
        .result-item:last-child {
            border-bottom: none;
        }
        .result-success { color: #28a745; }
        .result-error { color: #dc3545; }
        .result-info { color: #17a2b8; }
    </style>
</head>
<body>
    <div class="dashboard-container">
        <div class="dashboard-header">
            <h1>GMP门户测试仪表板</h1>
            <p>系统集成测试与验证平台</p>
        </div>

        <div class="progress-section">
            <h3>测试进度概览</h3>
            <div class="progress-bar">
                <div id="overall-progress" class="progress-fill" style="width: 0%"></div>
            </div>
            <p id="progress-text">准备开始测试...</p>
            <div id="test-results" class="test-results"></div>
        </div>

        <div class="quick-actions">
            <h3>快速操作</h3>
            <button class="test-button" onclick="runAllTests()">运行所有测试</button>
            <button class="test-button secondary" onclick="clearResults()">清除结果</button>
            <button class="test-button secondary" onclick="exportReport()">导出报告</button>
            <button class="test-button secondary" onclick="refreshStatus()">刷新状态</button>
        </div>

        <div class="test-grid">
            <div class="test-card">
                <div class="status status-ready">就绪</div>
                <h3>极简测试</h3>
                <p>基础JavaScript功能测试，验证脚本执行环境是否正常工作。</p>
                <a href="minimal-test.html" class="test-button">开始测试</a>
                <button class="test-button secondary" onclick="quickTest('minimal')">快速检查</button>
            </div>

            <div class="test-card">
                <div class="status status-ready">就绪</div>
                <h3>安全管理器测试</h3>
                <p>用户认证、权限管理、会话控制等安全功能的全面测试。</p>
                <a href="security-test.html" class="test-button">开始测试</a>
                <button class="test-button secondary" onclick="quickTest('security')">快速检查</button>
            </div>

            <div class="test-card">
                <div class="status status-ready">就绪</div>
                <h3>数据库管理器测试</h3>
                <p>数据库连接、CRUD操作、事务处理等数据库功能测试。</p>
                <a href="database-test.html" class="test-button">开始测试</a>
                <button class="test-button secondary" onclick="quickTest('database')">快速检查</button>
            </div>

            <div class="test-card">
                <div class="status status-ready">就绪</div>
                <h3>集成测试</h3>
                <p>数据库与安全管理器协同工作的完整流程测试。</p>
                <a href="integration-test.html" class="test-button">开始测试</a>
                <button class="test-button secondary" onclick="quickTest('integration')">快速检查</button>
            </div>

            <div class="test-card">
                <div class="status status-ready">就绪</div>
                <h3>自动测试</h3>
                <p>一键运行完整测试套件，自动生成详细报告。</p>
                <a href="auto-test.html" class="test-button">开始自动测试</a>
                <button class="test-button secondary" onclick="quickTest('auto')">快速检查</button>
            </div>

            <div class="test-card">
                <div class="status status-warning">待配置</div>
                <h3>Oracle集成测试</h3>
                <p>Oracle数据库连接、数据同步、跨数据库查询等高级功能测试。</p>
                <a href="oracle-test.html" class="test-button">开始测试</a>
                <button class="test-button secondary" onclick="quickTest('oracle')">快速检查</button>
            </div>

            <div class="test-card">
                <div class="status status-ready">就绪</div>
                <h3>性能测试</h3>
                <p>系统性能、响应时间、并发处理等性能指标测试。</p>
                <a href="performance-test.html" class="test-button">开始测试</a>
                <button class="test-button secondary" onclick="quickTest('performance')">快速检查</button>
            </div>
        </div>

        <div class="system-info">
            <h4>系统信息</h4>
            <div class="info-grid">
                <div class="info-item">
                    <strong>浏览器:</strong> <span id="browser-info">检测中...</span>
                </div>
                <div class="info-item">
                    <strong>JavaScript:</strong> <span id="js-status">检测中...</span>
                </div>
                <div class="info-item">
                    <strong>本地存储:</strong> <span id="storage-status">检测中...</span>
                </div>
                <div class="info-item">
                    <strong>网络状态:</strong> <span id="network-status">检测中...</span>
                </div>
                <div class="info-item">
                    <strong>测试时间:</strong> <span id="test-time">-</span>
                </div>
                <div class="info-item">
                    <strong>总体状态:</strong> <span id="overall-status">准备就绪</span>
                </div>
            </div>
        </div>
    </div>

    <script>
        let testProgress = {
            minimal: false,
            security: false,
            database: false,
            integration: false,
            oracle: false,
            performance: false
        };

        let testResults = [];

        function updateSystemInfo() {
            // 浏览器信息
            document.getElementById('browser-info').textContent = 
                navigator.userAgent.split(' ').slice(-2).join(' ');
            
            // JavaScript状态
            document.getElementById('js-status').textContent = '已启用';
            document.getElementById('js-status').style.color = '#28a745';
            
            // 本地存储状态
            const storageAvailable = typeof(Storage) !== "undefined";
            document.getElementById('storage-status').textContent = storageAvailable ? '可用' : '不可用';
            document.getElementById('storage-status').style.color = storageAvailable ? '#28a745' : '#dc3545';
            
            // 网络状态
            document.getElementById('network-status').textContent = navigator.onLine ? '在线' : '离线';
            document.getElementById('network-status').style.color = navigator.onLine ? '#28a745' : '#ffc107';
            
            // 测试时间
            document.getElementById('test-time').textContent = new Date().toLocaleString();
        }

        function updateOverallProgress() {
            const totalTests = Object.keys(testProgress).length;
            const completedTests = Object.values(testProgress).filter(Boolean).length;
            const percentage = Math.round((completedTests / totalTests) * 100);
            
            document.getElementById('overall-progress').style.width = percentage + '%';
            document.getElementById('progress-text').textContent = 
                `已完成 ${completedTests}/${totalTests} 项测试 (${percentage}%)`;
            
            // 更新总体状态
            const statusElement = document.getElementById('overall-status');
            if (percentage === 0) {
                statusElement.textContent = '准备就绪';
                statusElement.style.color = '#17a2b8';
            } else if (percentage === 100) {
                statusElement.textContent = '全部完成';
                statusElement.style.color = '#28a745';
            } else {
                statusElement.textContent = '进行中';
                statusElement.style.color = '#ffc107';
            }
        }

        function addTestResult(test, status, message) {
            const timestamp = new Date().toLocaleTimeString();
            const result = { test, status, message, timestamp };
            testResults.push(result);
            
            const resultsContainer = document.getElementById('test-results');
            const resultElement = document.createElement('div');
            resultElement.className = `result-item result-${status}`;
            resultElement.textContent = `[${timestamp}] ${test}: ${message}`;
            resultsContainer.appendChild(resultElement);
            
            resultsContainer.scrollTop = resultsContainer.scrollHeight;
        }

        async function quickTest(testType) {
            addTestResult(testType, 'info', '开始快速检查...');
            
            try {
                switch(testType) {
                    case 'minimal':
                        // 基础JavaScript测试
                        const testArray = [1, 2, 3];
                        const testResult = testArray.map(x => x * 2);
                        if (testResult.length === 3) {
                            addTestResult(testType, 'success', '基础JavaScript功能正常');
                            testProgress.minimal = true;
                        }
                        break;
                        
                    case 'security':
                        // 检查安全管理器是否加载
                        if (typeof GMP_Security !== 'undefined') {
                            addTestResult(testType, 'success', '安全管理器已加载');
                            testProgress.security = true;
                        } else {
                            addTestResult(testType, 'error', '安全管理器未加载');
                        }
                        break;
                        
                    case 'database':
                        // 检查数据库管理器是否加载
                        if (typeof GMP_Database !== 'undefined') {
                            addTestResult(testType, 'success', '数据库管理器已加载');
                            testProgress.database = true;
                        } else {
                            addTestResult(testType, 'error', '数据库管理器未加载');
                        }
                        break;
                        
                    case 'integration':
                        // 检查两个管理器是否都加载
                        if (typeof GMP_Security !== 'undefined' && typeof GMP_Database !== 'undefined') {
                            addTestResult(testType, 'success', '集成模块已就绪');
                            testProgress.integration = true;
                        } else {
                            addTestResult(testType, 'error', '集成模块未就绪');
                        }
                        break;
                        
                    case 'oracle':
                        // Oracle连接配置检查
                        addTestResult(testType, 'warning', 'Oracle连接需要实际服务器');
                        testProgress.oracle = false;
                        break;
                        
                    case 'performance':
                        // 性能测试
                        const startTime = performance.now();
                        for (let i = 0; i < 1000000; i++) {
                            Math.random();
                        }
                        const endTime = performance.now();
                        const duration = (endTime - startTime).toFixed(2);
                        addTestResult(testType, 'success', `性能测试完成，耗时: ${duration}ms`);
                        testProgress.performance = true;
                        break;
                }
            } catch (error) {
                addTestResult(testType, 'error', `测试失败: ${error.message}`);
            }
            
            updateOverallProgress();
        }

        async function runAllTests() {
            addTestResult('all', 'info', '开始运行所有测试...');
            
            const tests = ['minimal', 'security', 'database', 'integration', 'oracle', 'performance'];
            
            for (const test of tests) {
                await quickTest(test);
                await new Promise(resolve => setTimeout(resolve, 500)); // 短暂延迟
            }
            
            addTestResult('all', 'success', '所有测试完成');
        }

        function clearResults() {
            testResults = [];
            document.getElementById('test-results').innerHTML = '';
            
            // 重置进度
            Object.keys(testProgress).forEach(key => {
                testProgress[key] = false;
            });
            
            updateOverallProgress();
            addTestResult('system', 'info', '测试结果已清除');
        }

        function exportReport() {
            const report = {
                timestamp: new Date().toISOString(),
                progress: testProgress,
                results: testResults,
                summary: {
                    total: Object.keys(testProgress).length,
                    completed: Object.values(testProgress).filter(Boolean).length,
                    percentage: Math.round((Object.values(testProgress).filter(Boolean).length / Object.keys(testProgress).length) * 100)
                }
            };
            
            const reportBlob = new Blob([JSON.stringify(report, null, 2)], { type: 'application/json' });
            const reportUrl = URL.createObjectURL(reportBlob);
            const reportLink = document.createElement('a');
            reportLink.href = reportUrl;
            reportLink.download = `gmp-portal-test-report-${new Date().toISOString().split('T')[0]}.json`;
            reportLink.click();
            
            addTestResult('export', 'success', '测试报告已导出');
        }

        function refreshStatus() {
            updateSystemInfo();
            addTestResult('refresh', 'info', '系统状态已刷新');
        }

        // 页面加载时的初始化
        document.addEventListener('DOMContentLoaded', function() {
            updateSystemInfo();
            updateOverallProgress();
            addTestResult('system', 'success', '测试仪表板已加载');
        });

        // 定期更新时间
        setInterval(() => {
            document.getElementById('test-time').textContent = new Date().toLocaleString();
        }, 1000);
    </script>
</body>
</html>