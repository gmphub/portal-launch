<!DOCTYPE html>
<html lang="zh-CN">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>GMP门户自动测试</title>
    <link rel="stylesheet" href="assets/css/gmp-portal.css">
    <style>
        .test-container {
            max-width: 1000px;
            margin: 0 auto;
            padding: 20px;
        }
        .test-header {
            text-align: center;
            margin-bottom: 30px;
        }
        .test-console {
            background: #1e1e1e;
            color: #fff;
            padding: 20px;
            border-radius: 8px;
            font-family: 'Courier New', monospace;
            font-size: 14px;
            height: 500px;
            overflow-y: auto;
            margin-bottom: 20px;
        }
        .test-controls {
            text-align: center;
            margin-bottom: 20px;
        }
        .test-button {
            background: #007bff;
            color: white;
            border: none;
            padding: 10px 20px;
            border-radius: 4px;
            cursor: pointer;
            margin: 0 10px;
            font-size: 16px;
        }
        .test-button:hover {
            background: #0056b3;
        }
        .test-button:disabled {
            background: #6c757d;
            cursor: not-allowed;
        }
        .test-summary {
            background: #f8f9fa;
            border-radius: 8px;
            padding: 20px;
            margin-bottom: 20px;
        }
        .summary-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
            gap: 15px;
            text-align: center;
        }
        .summary-item {
            background: white;
            padding: 15px;
            border-radius: 8px;
            border-left: 4px solid #007bff;
        }
        .summary-item h4 {
            margin: 0 0 10px 0;
            color: #333;
        }
        .summary-item .value {
            font-size: 24px;
            font-weight: bold;
            color: #007bff;
        }
        .status-success { color: #28a745; }
        .status-error { color: #dc3545; }
        .status-warning { color: #ffc107; }
        .status-info { color: #17a2b8; }
        .progress-bar {
            width: 100%;
            height: 20px;
            background: #e9ecef;
            border-radius: 10px;
            overflow: hidden;
            margin: 20px 0;
        }
        .progress-fill {
            height: 100%;
            background: linear-gradient(90deg, #007bff, #28a745);
            transition: width 0.3s ease;
        }
        .log-line {
            margin: 2px 0;
            padding: 2px 0;
        }
        .log-success { color: #28a745; }
        .log-error { color: #dc3545; }
        .log-warning { color: #ffc107; }
        .log-info { color: #17a2b8; }
    </style>
</head>
<body>
    <div class="test-container">
        <div class="test-header">
            <h1>GMP门户自动测试系统</h1>
            <p>全面的系统功能验证和性能测试</p>
        </div>

        <div class="test-controls">
            <button id="runTest" class="test-button">运行完整测试</button>
            <button id="clearConsole" class="test-button">清除控制台</button>
            <button id="exportReport" class="test-button">导出报告</button>
        </div>

        <div class="progress-bar">
            <div id="progressFill" class="progress-fill" style="width: 0%"></div>
        </div>

        <div class="test-summary">
            <div class="summary-grid">
                <div class="summary-item">
                    <h4>总测试数</h4>
                    <div id="totalTests" class="value">0</div>
                </div>
                <div class="summary-item">
                    <h4>成功</h4>
                    <div id="successTests" class="value status-success">0</div>
                </div>
                <div class="summary-item">
                    <h4>失败</h4>
                    <div id="errorTests" class="value status-error">0</div>
                </div>
                <div class="summary-item">
                    <h4>警告</h4>
                    <div id="warningTests" class="value status-warning">0</div>
                </div>
                <div class="summary-item">
                    <h4>成功率</h4>
                    <div id="successRate" class="value">0%</div>
                </div>
                <div class="summary-item">
                    <h4>耗时</h4>
                    <div id="testDuration" class="value">0ms</div>
                </div>
            </div>
        </div>

        <div id="testConsole" class="test-console">
            <div class="log-line log-info">🚀 GMP门户自动测试系统已准备就绪</div>
            <div class="log-line log-info">点击"运行完整测试"开始测试...</div>
        </div>
    </div>

    <script src="assets/js/security.js"></script>
    <script src="assets/js/database.js"></script>
    <script src="quick-test.js"></script>
    <script>
        // 控制台输出重定向
        const originalLog = console.log;
        const consoleElement = document.getElementById('testConsole');
        
        console.log = function(...args) {
            originalLog.apply(console, args);
            
            const message = args.join(' ');
            const logLine = document.createElement('div');
            logLine.className = 'log-line';
            
            // 根据消息内容设置颜色
            if (message.includes('[SUCCESS]')) {
                logLine.className += ' log-success';
            } else if (message.includes('[ERROR]')) {
                logLine.className += ' log-error';
            } else if (message.includes('[WARNING]')) {
                logLine.className += ' log-warning';
            } else if (message.includes('[INFO]')) {
                logLine.className += ' log-info';
            }
            
            logLine.textContent = message;
            consoleElement.appendChild(logLine);
            consoleElement.scrollTop = consoleElement.scrollHeight;
        };

        // 测试状态管理
        let testRunner = null;
        let isTestRunning = false;

        // 更新测试统计
        function updateTestStats(results) {
            const totalTests = results.length;
            const successTests = results.filter(r => r.status === 'success').length;
            const errorTests = results.filter(r => r.status === 'error').length;
            const warningTests = results.filter(r => r.status === 'warning').length;
            const successRate = totalTests > 0 ? Math.round((successTests / totalTests) * 100) : 0;
            
            document.getElementById('totalTests').textContent = totalTests;
            document.getElementById('successTests').textContent = successTests;
            document.getElementById('errorTests').textContent = errorTests;
            document.getElementById('warningTests').textContent = warningTests;
            document.getElementById('successRate').textContent = successRate + '%';
        }

        // 更新进度条
        function updateProgress(current, total) {
            const percentage = total > 0 ? Math.round((current / total) * 100) : 0;
            document.getElementById('progressFill').style.width = percentage + '%';
        }

        // 运行测试
        async function runTest() {
            if (isTestRunning) return;
            
            isTestRunning = true;
            const runButton = document.getElementById('runTest');
            runButton.disabled = true;
            runButton.textContent = '测试运行中...';
            
            // 清空控制台
            consoleElement.innerHTML = '';
            
            // 创建测试运行器
            testRunner = new TestRunner();
            
            // 监听测试进度
            const originalLogResult = testRunner.log;
            let testCount = 0;
            const estimatedTests = 20; // 预估测试数量
            
            testRunner.log = function(test, status, message) {
                originalLogResult.call(this, test, status, message);
                testCount++;
                updateProgress(testCount, estimatedTests);
                updateTestStats(this.results);
            };
            
            // 记录开始时间
            const startTime = Date.now();
            
            try {
                // 运行测试
                await testRunner.runAllTests();
                
                // 更新最终统计
                updateTestStats(testRunner.results);
                
                // 计算耗时
                const duration = Date.now() - startTime;
                document.getElementById('testDuration').textContent = duration + 'ms';
                
                // 更新进度到100%
                updateProgress(estimatedTests, estimatedTests);
                
                console.log('✅ 所有测试完成!');
                
            } catch (error) {
                console.log(`❌ 测试运行出错: ${error.message}`);
            } finally {
                isTestRunning = false;
                runButton.disabled = false;
                runButton.textContent = '运行完整测试';
            }
        }

        // 清除控制台
        function clearConsole() {
            consoleElement.innerHTML = '';
            console.log('🧹 控制台已清除');
        }

        // 导出报告
        function exportReport() {
            if (!testRunner || !testRunner.results) {
                console.log('⚠️ 没有测试结果可导出，请先运行测试');
                return;
            }
            
            const report = {
                timestamp: new Date().toISOString(),
                duration: document.getElementById('testDuration').textContent,
                results: testRunner.results,
                summary: {
                    total: testRunner.results.length,
                    success: testRunner.results.filter(r => r.status === 'success').length,
                    error: testRunner.results.filter(r => r.status === 'error').length,
                    warning: testRunner.results.filter(r => r.status === 'warning').length,
                    info: testRunner.results.filter(r => r.status === 'info').length,
                    successRate: document.getElementById('successRate').textContent
                }
            };
            
            const reportBlob = new Blob([JSON.stringify(report, null, 2)], { type: 'application/json' });
            const reportUrl = URL.createObjectURL(reportBlob);
            const reportLink = document.createElement('a');
            reportLink.href = reportUrl;
            reportLink.download = `gmp-portal-test-report-${new Date().toISOString().split('T')[0]}.json`;
            reportLink.click();
            
            console.log('📄 测试报告已导出');
        }

        // 绑定事件
        document.getElementById('runTest').addEventListener('click', runTest);
        document.getElementById('clearConsole').addEventListener('click', clearConsole);
        document.getElementById('exportReport').addEventListener('click', exportReport);

        // 页面加载完成后的初始化
        document.addEventListener('DOMContentLoaded', function() {
            console.log('🌟 页面加载完成，系统已准备就绪');
            console.log('💡 提示：点击"运行完整测试"开始自动化测试');
        });
    </script>
</body>
</html>