<!DOCTYPE html>
<html lang="zh-CN">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>数据库管理器测试</title>
    <link rel="stylesheet" href="assets/css/gmp-portal.css">
    <style>
        .test-container {
            max-width: 800px;
            margin: 0 auto;
            padding: 20px;
        }
        .test-section {
            background: white;
            border-radius: 8px;
            padding: 20px;
            margin-bottom: 20px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }
        .test-result {
            background: #f8f9fa;
            border: 1px solid #dee2e6;
            border-radius: 4px;
            padding: 10px;
            margin-top: 10px;
            font-family: monospace;
            white-space: pre-wrap;
            max-height: 300px;
            overflow-y: auto;
        }
        .success { color: #28a745; }
        .error { color: #dc3545; }
        .info { color: #17a2b8; }
        button {
            background: #007bff;
            color: white;
            border: none;
            padding: 8px 16px;
            border-radius: 4px;
            cursor: pointer;
            margin: 5px;
        }
        button:hover {
            background: #0056b3;
        }
        .warning { color: #ffc107; }
    </style>
</head>
<body>
    <div class="test-container">
        <h1>数据库管理器测试</h1>
        
        <div class="test-section">
            <h2>连接测试</h2>
            <button onclick="testConnection()">测试数据库连接</button>
            <button onclick="testConnectionStatus()">检查连接状态</button>
            <div id="connection-results" class="test-result"></div>
        </div>
        
        <div class="test-section">
            <h2>基础操作测试</h2>
            <button onclick="testCreateTable()">创建测试表</button>
            <button onclick="testInsertData()">插入测试数据</button>
            <button onclick="testQueryData()">查询测试数据</button>
            <button onclick="testUpdateData()">更新测试数据</button>
            <button onclick="testDeleteData()">删除测试数据</button>
            <div id="basic-results" class="test-result"></div>
        </div>
        
        <div class="test-section">
            <h2>高级功能测试</h2>
            <button onclick="testTransaction()">事务测试</button>
            <button onclick="testBatchOperation()">批量操作测试</button>
            <button onclick="testStoredProcedure()">存储过程测试</button>
            <div id="advanced-results" class="test-result"></div>
        </div>
        
        <div class="test-section">
            <h2>Oracle集成测试</h2>
            <button onclick="testOracleConnection()">测试Oracle连接</button>
            <button onclick="testOracleQuery()">测试Oracle查询</button>
            <button onclick="testOracleSync()">测试数据同步</button>
            <div id="oracle-results" class="test-result"></div>
        </div>
    </div>

    <script src="assets/js/database.js"></script>
    <script>
        let testResults = {
            connection: [],
            basic: [],
            advanced: [],
            oracle: []
        };

        function logResult(category, message, type = 'info') {
            const timestamp = new Date().toLocaleTimeString();
            const logEntry = `[${timestamp}] ${type.toUpperCase()}: ${message}`;
            testResults[category].push(logEntry);
            updateResults(category);
        }

        function updateResults(category) {
            const container = document.getElementById(category + '-results');
            if (container) {
                container.innerHTML = testResults[category].join('\n');
                container.scrollTop = container.scrollHeight;
            }
        }

        async function testConnection() {
            try {
                logResult('connection', '开始数据库连接测试...', 'info');
                
                const connectionResult = await GMP_Database.connect();
                logResult('connection', `连接结果: ${JSON.stringify(connectionResult)}`, 
                    connectionResult.success ? 'success' : 'error');
                
                if (connectionResult.success) {
                    logResult('connection', '数据库连接成功建立', 'success');
                } else {
                    logResult('connection', `连接失败: ${connectionResult.error}`, 'error');
                }
                
            } catch (error) {
                logResult('connection', `连接测试异常: ${error.message}`, 'error');
            }
        }

        async function testConnectionStatus() {
            try {
                logResult('connection', '检查连接状态...', 'info');
                
                const status = GMP_Database.getConnectionStatus();
                logResult('connection', `连接状态: ${JSON.stringify(status)}`, 'info');
                
                if (status.connected) {
                    logResult('connection', `连接活跃，数据库类型: ${status.type}`, 'success');
                } else {
                    logResult('connection', '连接未建立或已断开', 'warning');
                }
                
            } catch (error) {
                logResult('connection', `状态检查异常: ${error.message}`, 'error');
            }
        }

        async function testCreateTable() {
            try {
                logResult('basic', '开始创建测试表...', 'info');
                
                const createTableSQL = `
                    CREATE TABLE test_users (
                        id NUMBER PRIMARY KEY,
                        username VARCHAR2(50) UNIQUE NOT NULL,
                        email VARCHAR2(100),
                        created_at DATE DEFAULT SYSDATE,
                        status VARCHAR2(20) DEFAULT 'active'
                    )
                `;
                
                const result = await GMP_Database.execute(createTableSQL);
                logResult('basic', `表创建结果: ${JSON.stringify(result)}`, 
                    result.success ? 'success' : 'error');
                
            } catch (error) {
                logResult('basic', `创建表失败: ${error.message}`, 'error');
            }
        }

        async function testInsertData() {
            try {
                logResult('basic', '开始插入测试数据...', 'info');
                
                const insertSQL = `
                    INSERT INTO test_users (id, username, email) 
                    VALUES (1, 'testuser', 'test@example.com')
                `;
                
                const result = await GMP_Database.execute(insertSQL);
                logResult('basic', `数据插入结果: ${JSON.stringify(result)}`, 
                    result.success ? 'success' : 'error');
                
                if (result.success) {
                    logResult('basic', `插入的行数: ${result.rowsAffected || 1}`, 'info');
                }
                
            } catch (error) {
                logResult('basic', `插入数据失败: ${error.message}`, 'error');
            }
        }

        async function testQueryData() {
            try {
                logResult('basic', '开始查询测试数据...', 'info');
                
                const querySQL = 'SELECT * FROM test_users';
                const result = await GMP_Database.query(querySQL);
                
                logResult('basic', `查询结果: ${JSON.stringify(result)}`, 
                    result.success ? 'success' : 'error');
                
                if (result.success && result.data) {
                    logResult('basic', `查询到 ${result.data.length} 条记录`, 'info');
                    result.data.forEach((row, index) => {
                        logResult('basic', `记录 ${index + 1}: ${JSON.stringify(row)}`, 'info');
                    });
                }
                
            } catch (error) {
                logResult('basic', `查询数据失败: ${error.message}`, 'error');
            }
        }

        async function testUpdateData() {
            try {
                logResult('basic', '开始更新测试数据...', 'info');
                
                const updateSQL = `
                    UPDATE test_users 
                    SET email = 'updated@example.com' 
                    WHERE username = 'testuser'
                `;
                
                const result = await GMP_Database.execute(updateSQL);
                logResult('basic', `数据更新结果: ${JSON.stringify(result)}`, 
                    result.success ? 'success' : 'error');
                
                if (result.success) {
                    logResult('basic', `更新的行数: ${result.rowsAffected || 1}`, 'info');
                }
                
            } catch (error) {
                logResult('basic', `更新数据失败: ${error.message}`, 'error');
            }
        }

        async function testDeleteData() {
            try {
                logResult('basic', '开始删除测试数据...', 'info');
                
                const deleteSQL = "DELETE FROM test_users WHERE username = 'testuser'";
                const result = await GMP_Database.execute(deleteSQL);
                
                logResult('basic', `数据删除结果: ${JSON.stringify(result)}`, 
                    result.success ? 'success' : 'error');
                
                if (result.success) {
                    logResult('basic', `删除的行数: ${result.rowsAffected || 1}`, 'info');
                }
                
            } catch (error) {
                logResult('basic', `删除数据失败: ${error.message}`, 'error');
            }
        }

        async function testTransaction() {
            try {
                logResult('advanced', '开始事务测试...', 'info');
                
                const transactionResult = await GMP_Database.transaction(async (connection) => {
                    // 在事务中执行多个操作
                    await connection.execute('INSERT INTO test_users (id, username) VALUES (2, "user2")');
                    await connection.execute('INSERT INTO test_users (id, username) VALUES (3, "user3")');
                    return { success: true, message: '事务执行成功' };
                });
                
                logResult('advanced', `事务结果: ${JSON.stringify(transactionResult)}`, 
                    transactionResult.success ? 'success' : 'error');
                
            } catch (error) {
                logResult('advanced', `事务测试失败: ${error.message}`, 'error');
            }
        }

        async function testBatchOperation() {
            try {
                logResult('advanced', '开始批量操作测试...', 'info');
                
                const batchSQL = [
                    'INSERT INTO test_users (id, username) VALUES (4, "user4")',
                    'INSERT INTO test_users (id, username) VALUES (5, "user5")',
                    'INSERT INTO test_users (id, username) VALUES (6, "user6")'
                ];
                
                const batchResult = await GMP_Database.batch(batchSQL);
                logResult('advanced', `批量操作结果: ${JSON.stringify(batchResult)}`, 
                    batchResult.success ? 'success' : 'error');
                
            } catch (error) {
                logResult('advanced', `批量操作测试失败: ${error.message}`, 'error');
            }
        }

        async function testStoredProcedure() {
            try {
                logResult('advanced', '开始存储过程测试...', 'info');
                
                // 创建一个简单的存储过程
                const createProcedureSQL = `
                    CREATE OR REPLACE PROCEDURE test_procedure(p_result OUT VARCHAR2) AS
                    BEGIN
                        p_result := 'Hello from stored procedure';
                    END;
                `;
                
                const createResult = await GMP_Database.execute(createProcedureSQL);
                logResult('advanced', `存储过程创建结果: ${JSON.stringify(createResult)}`, 
                    createResult.success ? 'success' : 'error');
                
                if (createResult.success) {
                    // 调用存储过程
                    const callResult = await GMP_Database.callProcedure('test_procedure', []);
                    logResult('advanced', `存储过程调用结果: ${JSON.stringify(callResult)}`, 
                        callResult.success ? 'success' : 'error');
                }
                
            } catch (error) {
                logResult('advanced', `存储过程测试失败: ${error.message}`, 'error');
            }
        }

        async function testOracleConnection() {
            try {
                logResult('oracle', '开始Oracle连接测试...', 'info');
                
                const oracleConfig = {
                    user: 'your_oracle_user',
                    password: 'your_oracle_password',
                    connectString: 'localhost:1521/XE'
                };
                
                const oracleResult = await GMP_Database.connectOracle(oracleConfig);
                logResult('oracle', `Oracle连接结果: ${JSON.stringify(oracleResult)}`, 
                    oracleResult.success ? 'success' : 'error');
                
            } catch (error) {
                logResult('oracle', `Oracle连接测试失败: ${error.message}`, 'error');
            }
        }

        async function testOracleQuery() {
            try {
                logResult('oracle', '开始Oracle查询测试...', 'info');
                
                const oracleQuery = 'SELECT * FROM all_tables WHERE ROWNUM <= 5';
                const queryResult = await GMP_Database.oracleQuery(oracleQuery);
                
                logResult('oracle', `Oracle查询结果: ${JSON.stringify(queryResult)}`, 
                    queryResult.success ? 'success' : 'error');
                
                if (queryResult.success && queryResult.data) {
                    logResult('oracle', `查询到 ${queryResult.data.length} 个表`, 'info');
                }
                
            } catch (error) {
                logResult('oracle', `Oracle查询测试失败: ${error.message}`, 'error');
            }
        }

        async function testOracleSync() {
            try {
                logResult('oracle', '开始Oracle数据同步测试...', 'info');
                
                const syncConfig = {
                    sourceTable: 'oracle_table',
                    targetTable: 'local_table',
                    syncMode: 'full'
                };
                
                const syncResult = await GMP_Database.syncWithOracle(syncConfig);
                logResult('oracle', `数据同步结果: ${JSON.stringify(syncResult)}`, 
                    syncResult.success ? 'success' : 'error');
                
            } catch (error) {
                logResult('oracle', `数据同步测试失败: ${error.message}`, 'error');
            }
        }

        // 页面加载时的初始化
        document.addEventListener('DOMContentLoaded', function() {
            logResult('connection', '数据库管理器测试页面已加载', 'info');
            logResult('basic', '基础操作测试已准备就绪', 'info');
            logResult('advanced', '高级功能测试已准备就绪', 'info');
            logResult('oracle', 'Oracle集成测试已准备就绪', 'info');
        });
    </script>
</body>
</html>