<!DOCTYPE html>
<html lang="zh-CN">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>性能测试 - GMP门户系统</title>
    <link rel="stylesheet" href="assets/css/gmp-portal.css">
    <style>
        .performance-container {
            max-width: 1000px;
            margin: 0 auto;
            padding: 20px;
        }
        .test-section {
            background: white;
            border-radius: 8px;
            padding: 20px;
            margin-bottom: 20px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }
        .test-button {
            background: #007bff;
            color: white;
            border: none;
            padding: 10px 20px;
            border-radius: 4px;
            cursor: pointer;
            margin: 5px;
        }
        .test-button:hover {
            background: #0056b3;
        }
        .results-area {
            background: #f8f9fa;
            border: 1px solid #dee2e6;
            border-radius: 4px;
            padding: 15px;
            margin-top: 15px;
            font-family: monospace;
            white-space: pre-wrap;
            max-height: 400px;
            overflow-y: auto;
        }
        .metric-card {
            background: #e9ecef;
            padding: 15px;
            border-radius: 8px;
            margin: 10px 0;
            text-align: center;
        }
        .metric-value {
            font-size: 2rem;
            font-weight: bold;
            color: #007bff;
        }
        .metric-label {
            color: #666;
            margin-top: 5px;
        }
        .progress-bar {
            width: 100%;
            height: 20px;
            background: #e9ecef;
            border-radius: 10px;
            overflow: hidden;
            margin: 10px 0;
        }
        .progress-fill {
            height: 100%;
            background: linear-gradient(90deg, #007bff, #28a745);
            transition: width 0.3s ease;
        }
    </style>
</head>
<body>
    <div class="performance-container">
        <h1>系统性能测试</h1>
        
        <div class="test-section">
            <h2>JavaScript性能测试</h2>
            <button class="test-button" onclick="testJSPeformance()">测试JS执行性能</button>
            <button class="test-button" onclick="testMemoryUsage()">测试内存使用</button>
            <button class="test-button" onclick="testDOMPerformance()">测试DOM操作性能</button>
            <div id="js-results" class="results-area"></div>
        </div>

        <div class="test-section">
            <h2>数据库性能测试</h2>
            <button class="test-button" onclick="testDatabasePerformance()">测试数据库操作</button>
            <button class="test-button" onclick="testQueryPerformance()">测试查询性能</button>
            <button class="test-button" onclick="testTransactionPerformance()">测试事务性能</button>
            <div id="db-results" class="results-area"></div>
        </div>

        <div class="test-section">
            <h2>安全性能测试</h2>
            <button class="test-button" onclick="testAuthPerformance()">测试认证性能</button>
            <button class="test-button" onclick="testCryptoPerformance()">测试加密性能</button>
            <button class="test-button" onclick="testSessionPerformance()">测试会话性能</button>
            <div id="security-results" class="results-area"></div>
        </div>

        <div class="test-section">
            <h2>综合性能指标</h2>
            <div class="progress-bar">
                <div id="overall-progress" class="progress-fill" style="width: 0%"></div>
            </div>
            <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 15px;">
                <div class="metric-card">
                    <div id="js-metric" class="metric-value">-</div>
                    <div class="metric-label">JavaScript性能 (ms)</div>
                </div>
                <div class="metric-card">
                    <div id="db-metric" class="metric-value">-</div>
                    <div class="metric-label">数据库性能 (ms)</div>
                </div>
                <div class="metric-card">
                    <div id="security-metric" class="metric-value">-</div>
                    <div class="metric-label">安全性能 (ms)</div>
                </div>
                <div class="metric-card">
                    <div id="memory-metric" class="metric-value">-</div>
                    <div class="metric-label">内存使用 (MB)</div>
                </div>
            </div>
        </div>

        <div class="test-section">
            <h2>压力测试</h2>
            <button class="test-button" onclick="runStressTest()">运行压力测试</button>
            <button class="test-button" onclick="testConcurrentOperations()">测试并发操作</button>
            <div id="stress-results" class="results-area"></div>
        </div>
    </div>

    <script src="assets/js/security.js"></script>
    <script src="assets/js/database.js"></script>
    <script>
        let testResults = {
            js: [],
            db: [],
            security: [],
            stress: []
        };

        function logResult(category, message) {
            const timestamp = new Date().toLocaleTimeString();
            const logEntry = `[${timestamp}] ${message}`;
            testResults[category].push(logEntry);
            updateResults(category);
        }

        function updateResults(category) {
            const container = document.getElementById(category + '-results');
            if (container) {
                container.innerHTML = testResults[category].join('\n');
                container.scrollTop = container.scrollHeight;
            }
        }

        function updateMetric(metricId, value) {
            const element = document.getElementById(metricId);
            if (element) {
                element.textContent = value;
            }
        }

        function updateProgress(percentage) {
            const progressFill = document.getElementById('overall-progress');
            if (progressFill) {
                progressFill.style.width = percentage + '%';
            }
        }

        // JavaScript性能测试
        async function testJSPeformance() {
            logResult('js', '开始JavaScript性能测试...');
            
            const startTime = performance.now();
            
            // 测试大量计算
            let result = 0;
            for (let i = 0; i < 1000000; i++) {
                result += Math.sqrt(i) * Math.sin(i);
            }
            
            const endTime = performance.now();
            const duration = (endTime - startTime).toFixed(2);
            
            logResult('js', `计算性能测试完成，耗时: ${duration}ms`);
            updateMetric('js-metric', duration);
            updateProgress(25);
        }

        async function testMemoryUsage() {
            logResult('js', '开始内存使用测试...');
            
            if (performance.memory) {
                const memoryInfo = performance.memory;
                const usedMB = (memoryInfo.usedJSHeapSize / 1024 / 1024).toFixed(2);
                const totalMB = (memoryInfo.totalJSHeapSize / 1024 / 1024).toFixed(2);
                
                logResult('js', `内存使用: ${usedMB}MB / ${totalMB}MB`);
                updateMetric('memory-metric', usedMB);
            } else {
                logResult('js', '浏览器不支持内存监控');
                updateMetric('memory-metric', 'N/A');
            }
            
            updateProgress(50);
        }

        async function testDOMPerformance() {
            logResult('js', '开始DOM操作性能测试...');
            
            const startTime = performance.now();
            
            // 创建大量DOM元素
            const container = document.createElement('div');
            for (let i = 0; i < 1000; i++) {
                const element = document.createElement('div');
                element.textContent = `Element ${i}`;
                container.appendChild(element);
            }
            
            const endTime = performance.now();
            const duration = (endTime - startTime).toFixed(2);
            
            logResult('js', `DOM操作性能测试完成，耗时: ${duration}ms`);
            updateProgress(75);
        }

        // 数据库性能测试
        async function testDatabasePerformance() {
            logResult('db', '开始数据库性能测试...');
            
            const startTime = performance.now();
            
            // 测试多次数据库操作
            const operations = [];
            for (let i = 0; i < 100; i++) {
                operations.push(GMP_Database.execute(`INSERT INTO test_table VALUES (${i}, 'test${i}')`));
            }
            
            await Promise.all(operations);
            
            const endTime = performance.now();
            const duration = (endTime - startTime).toFixed(2);
            
            logResult('db', `数据库操作性能测试完成，耗时: ${duration}ms`);
            updateMetric('db-metric', duration);
        }

        async function testQueryPerformance() {
            logResult('db', '开始查询性能测试...');
            
            const startTime = performance.now();
            
            // 测试复杂查询
            const result = await GMP_Database.query('SELECT * FROM test_users WHERE username LIKE \'%test%\'');
            
            const endTime = performance.now();
            const duration = (endTime - startTime).toFixed(2);
            
            logResult('db', `查询性能测试完成，耗时: ${duration}ms，返回${result.rowCount}条记录`);
        }

        async function testTransactionPerformance() {
            logResult('db', '开始事务性能测试...');
            
            const startTime = performance.now();
            
            // 测试事务
            const result = await GMP_Database.transaction(async (db) => {
                await db.execute('INSERT INTO test_table VALUES (1, \'test\')');
                await db.execute('UPDATE test_table SET name = \'updated\' WHERE id = 1');
                return 'Transaction completed';
            });
            
            const endTime = performance.now();
            const duration = (endTime - startTime).toFixed(2);
            
            logResult('db', `事务性能测试完成，耗时: ${duration}ms`);
        }

        // 安全性能测试
        async function testAuthPerformance() {
            logResult('security', '开始认证性能测试...');
            
            const startTime = performance.now();
            
            // 测试用户认证
            const result = await GMP_Security.authenticateUser('testuser', 'testpassword');
            
            const endTime = performance.now();
            const duration = (endTime - startTime).toFixed(2);
            
            logResult('security', `认证性能测试完成，耗时: ${duration}ms`);
            updateMetric('security-metric', duration);
        }

        async function testCryptoPerformance() {
            logResult('security', '开始加密性能测试...');
            
            const startTime = performance.now();
            
            // 测试令牌生成
            const result = await GMP_Security.generateToken({ userId: 'test', role: 'user' });
            
            const endTime = performance.now();
            const duration = (endTime - startTime).toFixed(2);
            
            logResult('security', `加密性能测试完成，耗时: ${duration}ms`);
        }

        async function testSessionPerformance() {
            logResult('security', '开始会话性能测试...');
            
            const startTime = performance.now();
            
            // 测试会话操作
            const session = await GMP_Security.createSession({ userId: 'test', username: 'testuser' });
            const validation = await GMP_Security.validateSession(session.sessionId);
            
            const endTime = performance.now();
            const duration = (endTime - startTime).toFixed(2);
            
            logResult('security', `会话性能测试完成，耗时: ${duration}ms`);
        }

        // 压力测试
        async function runStressTest() {
            logResult('stress', '开始压力测试...');
            
            const startTime = performance.now();
            const concurrentRequests = 100;
            
            // 并发执行多个操作
            const promises = [];
            for (let i = 0; i < concurrentRequests; i++) {
                promises.push(GMP_Database.execute(`INSERT INTO stress_test VALUES (${i}, 'stress${i}')`));
                promises.push(GMP_Security.generateToken({ userId: `user${i}`, role: 'user' }));
            }
            
            const results = await Promise.all(promises);
            
            const endTime = performance.now();
            const duration = (endTime - startTime).toFixed(2);
            
            logResult('stress', `压力测试完成，${concurrentRequests}个并发请求，耗时: ${duration}ms`);
            logResult('stress', `平均每个请求耗时: ${(duration / concurrentRequests).toFixed(2)}ms`);
        }

        async function testConcurrentOperations() {
            logResult('stress', '开始并发操作测试...');
            
            const startTime = performance.now();
            
            // 模拟真实并发场景
            const userOperations = [];
            for (let i = 0; i < 50; i++) {
                userOperations.push(
                    GMP_Security.authenticateUser(`user${i}`, `password${i}`)
                );
            }
            
            const dbOperations = [];
            for (let i = 0; i < 50; i++) {
                dbOperations.push(
                    GMP_Database.query(`SELECT * FROM test_users WHERE id = ${i}`)
                );
            }
            
            const [userResults, dbResults] = await Promise.all([
                Promise.all(userOperations),
                Promise.all(dbOperations)
            ]);
            
            const endTime = performance.now();
            const duration = (endTime - startTime).toFixed(2);
            
            logResult('stress', `并发操作测试完成，耗时: ${duration}ms`);
            logResult('stress', `用户认证成功率: ${userResults.filter(r => r.success).length}/50`);
            logResult('stress', `数据库查询成功率: ${dbResults.filter(r => r.success).length}/50`);
        }

        // 页面加载时的初始化
        document.addEventListener('DOMContentLoaded', function() {
            logResult('js', '性能测试页面已加载');
            logResult('db', '数据库性能测试已准备就绪');
            logResult('security', '安全性能测试已准备就绪');
            logResult('stress', '压力测试已准备就绪');
        });
    </script>
</body>
</html>